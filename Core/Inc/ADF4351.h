/*
 * ADF4351.h
 *
 *  Created on: May 7, 2023
 *      Author: iroen
 */

#ifndef INC_ADF4351_H_
#define INC_ADF4351_H_

#include <main.h>

typedef enum registerBits {
	register0 = 0b000,
	register1 = 0b001,
	register2 = 0b010,
	register3 = 0b011,
	register4 = 0b100,
	register5 = 0b101
} registerControlBits;
typedef enum registerNames{
	FRAC = 3,
	INT = 15,
	MOD = 3,
	PHASE = 15,
	PRESCALER = 27,
	PHASE_ADJUST = 28,
	COUNTER_RESET = 3,
	CP_THREESTATE = 4,
	POWER_DOWN = 5,
	PD_POLARITY = 6,
	LDP = 7,
	LDF = 8,
	CHARGE_PUMP_CURRENT_SETTING = 9,
	DOUBLE_BUFF = 13,
	R_COUNTER = 14,
	RDIV2 = 24,
	REFFERENCE_DIVIDER = 25,
	MUXOUT = 26,
	LOW_NOISE_AND_LOW_SPUR_MODE = 29,
	CLOCK_DIVIDER_VALUE = 3,
	CLK_DIV_MODE = 15,
	CSR = 18,
	CHARGE_CANCEL = 21,
	ABP = 22,
	BAND_SELECT_CLOCK_MODE = 23,
	OUTPUT_POWER = 3,
	RF_OUTPUT_ENABLE = 5,
	AUX_OUTPUT_POWER = 6,
	AUX_OUTPUT_ENABLE = 8,
	AUX_OUTPUT_SELECT = 9,
	MTLD = 10,
	VCO_POWER_DOWN = 11,
	BAND_SELECT_CLOCK_DIVIDER_VALUE = 12,
	RF_DIVIDER_SELECT = 20,
	FEEDBACK_SELECT = 23,
	LD_PIN_MODE = 22
}registername;
#define PRESCALER_4_5 (0b00 << 27)
#define PRESCALER_8_9 (0b01 << 27)
#define PHASE_ADJUST_OFF (0b00 <<28)
#define PHASE_ADJUST_ON (0b01 << 28)
#define COUNTER_RESET_DISABLED (0b00 << 3)
#define COUNTER_RESET_ENABLED (0b01 << 3)
#define CP_THREESTATE_DISABLED (0b00 << 4)
#define CP_THREESTATE_ENABLED (0b01 << 4)
#define POWER_DOWN_DISABLED (0b00 << 5)
#define POWER_DOWN_ENABLED (0b01 << 5)
#define PD_POLARITY_NEGATIVE (0b00 << 6)
#define PD_POLARITY_POSITIVE (0b01 << 6)
#define LDP_10NS (0b00 << 7)
#define LDP_6NS (0b01 << 7)
#define LDF_FRAC_N (0b0 << 8)
#define LDF_INT_N (0b1 << 8)
#define CHARGE_PUMP_CURRENT_SETTING_0_31MA (0b0000 << 9)
#define CHARGE_PUMP_CURRENT_SETTING_0_63MA (0b0001 << 9)
#define CHARGE_PUMP_CURRENT_SETTING_0_94MA (0b0010 << 9)
#define CHARGE_PUMP_CURRENT_SETTING_1_25MA (0b0011 << 9)
#define CHARGE_PUMP_CURRENT_SETTING_1_56MA (0b0100 << 9)
#define CHARGE_PUMP_CURRENT_SETTING_1_88MA (0b0101 << 9)
#define CHARGE_PUMP_CURRENT_SETTING_2_19MA (0b0110 << 9)
#define CHARGE_PUMP_CURRENT_SETTING_2_50MA (0b0111 << 9)
#define CHARGE_PUMP_CURRENT_SETTING_2_81MA (0b1000 << 9)
#define CHARGE_PUMP_CURRENT_SETTING_3_13MA (0b1001 << 9)
#define CHARGE_PUMP_CURRENT_SETTING_3_44MA (0b1010 << 9)
#define CHARGE_PUMP_CURRENT_SETTING_3_75MA (0b1011 << 9)
#define CHARGE_PUMP_CURRENT_SETTING_4_06MA (0b1100 << 9)
#define CHARGE_PUMP_CURRENT_SETTING_4_38MA (0b1101 << 9)
#define CHARGE_PUMP_CURRENT_SETTING_4_69MA (0b1110 << 9)
#define CHARGE_PUMP_CURRENT_SETTING_5_00MA (0b1111 << 9)
#define DOUBLE_BUFF_DISABLED (0b0 << 13)
#define DOUBLE_BUFF_ENABLED (0b1 << 13)
#define RDIV2_DISABLED (0b0 << 24)
#define RDIV2_ENABLED (0b1 << 24)
#define REFERENCE_DOUBLER_DISABLED (0b0 << 25)
#define REFERENCE_DOUBLER_ENABLED (0b1 << 25)
#define MUXOUT_THREESTATE_OUTPUT (0b000 << 26)
#define MUXOUT_DVDD (0b001 << 26)
#define MUXOUT_DGND (0b010 << 26)
#define MUXOUT_R_DIVIDER_OUTPUT (0b011 << 26)
#define MUXOUT_N_DIVIDER_OUTPUT (0b100 << 26)
#define MUXOUT_ANALOG_LOCK_DETECT (0b101 << 26)
#define MUXOUT_DIGITAL_LOCK_DETECT (0b110 << 26)
#define MUXOUT_RESERVED (0b111 << 26)
#define LOW_NOISE_AND_LOW_SPUR_MODE_LOW_NOISE_MODE (0b00 << 29)
#define LOW_NOISE_AND_LOW_SPUR_MODE_RESERVED1 (0b01 << 29)
#define LOW_NOISE_AND_LOW_SPUR_MODE_RESERVED2 (0b10 << 29)
#define LOW_NOISE_AND_LOW_SPUR_MODE_LOW_SPUR_MODE (0b11 << 29)
#define CLK_DIV_MODE_CLOCK_DIVIDER_OFF (0b00 << 15)
#define CLK_DIV_MODE_FAST_LOCK_ENABLE (0b01 << 15)
#define CLK_DIV_MODE_RESYNC_ENABLE (0b10 << 15)
#define CLK_DIV_MODE_RESERVED (0b11 << 15)
#define CSR_DISABLED (0b0 << 18)
#define CSR_ENABLED (0b1 << 18)
#define CHARGE_CANCEL_DISABLED (0b0 << 21)
#define CHARGE_CANCEL_ENABLED (0b1 << 21)
#define ABP_6NS (0b0 << 22)
#define ABP_3NS (0b1 << 22)
#define BAND_SELECT_CLOCK_MODE_LOW (0b0 << 23)
#define BAND_SELECT_CLOCK_MODE_HIGH (0b1 << 23)
#define OUTPUT_POWER_MINUS_4DBM (0b00 << 3)
#define OUTPUT_POWER_MINUS_1DBM (0b01 << 3)
#define OUTPUT_POWER_PLUS_2DBM (0b10 << 3)
#define OUTPUT_POWER_PLUS_5DBM (0b11 << 3)
#define RF_OUTPUT_DISABLED (0b0 << 5)
#define RF_OUTPUT_ENABLED (0b1 << 5)
#define AUX_OUTPUT_POWER_MINUS_4DBM (0b00 << 6)
#define AUX_OUTPUT_POWER_MINUS_1DBM (0b01 << 6)
#define AUX_OUTPUT_POWER_PLUS_2DBM (0b10 << 6)
#define AUX_OUTPUT_POWER_PLUS_5DBM (0b11 << 6)
#define AUX_OUTPUT_DISABLED (0b0 << 8)
#define AUX_OUTPUT_ENABLED (0b1 << 8)
#define AUX_OUTPUT_SELECT_DIVIDED_OUTPUT (0b0 << 9)
#define AUX_OUTPUT_SELECT_FUNDAMENTAL_OUTPUT (0b1 << 9)
#define MTLD_MUTE_DISABLED (0b0 << 10)
#define MTLD_MUTE_ENABLED (0b1 << 10)
#define VCO_POWER_DOWN_VCO_POWERED_UP (0b0 << 11)
#define VCO_POWER_DOWN_VCO_POWERED_DOWN (0b1 << 11)
#define FEEDBACK_SELECT_DIVIDED (0b0 << 23)
#define FEEDBACK_SELECT_FUNDAMENTAL (0b1 << 23)
#define LD_PIN_MODE_LOW1 (0b00 << 22)
#define LD_PIN_MODE_DIGITAL_LOCK_DETECT (0b01 << 22)
#define LD_PIN_MODE_LOW2 (0b10 << 22)
#define LD_PIN_MODE_HIGH (0b11 << 22)


class ADF4351 {
public:
	ADF4351();
	virtual ~ADF4351();

	uint32_t setRegister(registerControlBits reg_bank, uint32_t reg_name);
	uint32_t setRegister(registerControlBits reg_bank, uint32_t reg_name, uint32_t reg_value);
};

#endif /* INC_ADF4351_H_ */
